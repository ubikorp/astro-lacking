---
import type { ImageMetadata } from 'astro';
import { Icon } from 'astro-icon/components';
// import Image from '~/components/common/Image.astro';
import PostTags from '~/components/blog/Tags.astro';
import Tile from '~/components/tlo/Tile.astro';

import type { Post } from '~/types';

import { getPermalink } from '~/utils/permalinks';
import { findImage } from '~/utils/images';
import { getFormattedDate } from '~/utils/utils';
import { toMarkdown } from '~/utils/tlo';

export interface Props {
  post: Post;
}

const { post } = Astro.props;
const image = (await findImage(post.image)) as ImageMetadata | undefined;

const link = post.link_url || getPermalink(post.permalink, 'post');
const external = !!post.link_url
---

<article class={`max-w-md mx-auto md:max-w-none grid gap-6 md:gap-8 ${image ? 'md:grid-cols-2' : ''}`}>

  <!-- Tile -->
  <Tile post={post} />

  <!-- Text -->
  <div class="mt-2">
    <header>
      <div class="mb-1">
        <span class="text-sm">
          <Icon name="tabler:clock" class="w-3.5 h-3.5 inline-block -mt-0.5 dark:text-gray-400" />
          <time datetime={String(post.publishDate)} class="inline-block">{getFormattedDate(post.publishDate)}</time>
          {
            post.author && (
              <>
                {' '}
                · <Icon name="tabler:user" class="w-3.5 h-3.5 inline-block -mt-0.5 dark:text-gray-400" />
                <span>{post.author.replaceAll('-', ' ')}</span>
              </>
            )
          }
          {
            post.category && (
              <>
                {' '}
                ·{' '}
                <a class="hover:underline" href={getPermalink(post.category.slug, 'category')}>
                  {post.category.title}
                </a>
              </>
            )
          }
        </span>
      </div>
      <h2 class="text-xl sm:text-2xl font-bold leading-tight mb-2 font-heading dark:text-slate-300">
        {
          link ? (
            <a
              class="inline-block hover:text-primary transition ease-in duration-200"
              href={link}
              target={external ? '_blank' : ''}
            >
              <span set:html={post.title} />
              { external && <Icon name="tabler:external-link" class="w-4.5 h-4.5 inline-block -mt-0.5 dark:text-gray-400" /> }
            </a>
          ) : (
            <span set:html={post.title} />
          )
        }
      </h2>
    </header>

    {post.excerpt && <p class="flex-grow text-muted dark:text-slate-400 text-lg" set:html={toMarkdown(post.excerpt, { bare: true })} />}
    {
      post.tags && Array.isArray(post.tags) ? (
        <footer class="mt-5">
          <PostTags tags={post.tags} />
        </footer>
      ) : (
        <Fragment />
      )
    }
  </div>
</article>
